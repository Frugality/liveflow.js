{
  "name": "Thingamajig.js",
  "tagline": "Live Editing for Node.js and Browsers",
  "body": "Thingamajig.js is a *small* runtime extension that enables live-editing of\r\nscripts as-well as live-reloading of required json files.\r\n\r\nIt's a pure, self-contained JavaScript based implementation with no external\r\nparts and *should* work in any more or less any JavaScript runtime, be it\r\nNode.js, Chrome, Firefox, Safari, Internet Explorer or Microsoft Edge.\r\n\r\n## Features\r\n\r\n##### Live Editing of Scripts\r\n\r\nWhenever scripts are changed on disk, across the network or within the document\r\nobject model itself (e.g inline script tags) the source of that script is\r\nre-evaluated in its original execution context.\r\n\r\nRe-evaluation means the following things:\r\n* Modified and new top level call expressions are called.\r\n* Surviving call expressions yield their previous value.\r\n* Function modifications are applied.\r\n\r\n##### Live Reloading of Documents\r\n\r\nWhenever a document is changed on disk or across the network,\r\nthe page will be reloaded.\r\n\r\n##### Live Reloading of Style Sheets\r\n\r\nWhenever style-sheets are changed on disk or across the network, the old style\r\nlink will be replaced with a new one causing the style-sheet to reload.\r\n\r\n##### Live Reloading of Images\r\n\r\nWhenever image sources are changed on disk or across the network, the image\r\nelements linking to that file will be reloaded.\r\n\r\n##### Live Reloading of JSON\r\n\r\nWhenever the source of a JSON file changes on disk that has been imported with\r\n`require`, it will reload and replace the key/value pairs on the original\r\nobject.\r\n\r\n*This only applies to Node.js environments.*\r\n\r\n## Getting Started\r\n\r\nThingamajig.js has been designed to be as **configuration free** as possible,\r\njust include the script in your runtime environment and be done with it.\r\n\r\n### Node.js\r\n\r\n1. Install the `thingamajig` module.\r\n```\r\nnpm install thingamajig\r\n```\r\n\r\n2. Start node with the `--require` (shorthand `-r`) option, passing in\r\n`thingamajig` as the module name to require.\r\n\r\n```\r\nnode -r thingamajig myapp.js\r\n```\r\n\r\n3. 3. Enjoy live editing and reloading.\r\n\r\nIf you want to do your own post-processing in addition to what thingamajig does,\r\nadd a listener on the `reload` event.\r\n\r\n```js\r\nproces.on('reload', function(module) {\r\n  console.log(module.filename, 'reloaded');\r\n});\r\n```\r\n\r\n### Browser\r\n\r\n1. Include the following script at the very top of the `head` section in your\r\ndocument, it should be the first element after the opening `<head>` tag.\r\n\r\n```html\r\n<script src=\"//thingamajig.js.org/thingamajig.js\"></script>\r\n```\r\n\r\n2. Open the document in your preferred browser.\r\n\r\n3. Enjoy live editing and reloading.\r\n\r\nIf you want to do your own post-processing in addition to what thingamajig does,\r\nadd an event listener to the `reload` event.\r\n\r\n```js\r\ndocument.addEventListener('reload', function(event) {\r\n  console.log(event.target);\r\n});\r\n```\r\n\r\n## Documentation\r\n\r\nSee [https://thingamajig.js.org].\r\n\r\n## License\r\n\r\nMIT\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}